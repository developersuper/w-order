name: Production Build

on:
  push:
    branches: [ "main" ]

env:
  # Common env
  AWS_REGION: ${{ secrets.AWS_REGION_PROD }}
  ECS_CLUSTER: menubly-cluster    
  # API env
  ECR_REPOSITORY: menubly-api
  ECS_SERVICE: menubly-api-service
  ECS_TASK_DEFINITION: .github/workflows/menubly-api-prod-task-definition.json
  CONTAINER_NAME: menubly-api     
  # Migrator env
  MIGRATOR_REPOSITORY: menubly-migrator               
  MIGRATOR_ECS_SERVICE: menubly-migrator-service
  MIGRATOR_TASK_DEFINITION: .github/workflows/menubly-migrator-prod-task-definition.json                 
  MIGRATOR_CONTAINER_NAME: menubly-migrator    

permissions:
  contents: read

jobs:
  detect_changes:
    name: Find migration files
    runs-on: ubuntu-latest
    timeout-minutes: 1
    environment: production
    outputs:
      migrator: ${{ steps.filter.outputs.migrator }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Detect path changes
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          migrator:
            - 'Menubly.Infrastructure/Migrations/**'
            - 'Menubly.Migrator/**'
  
  migration:
    name: Apply database migrations
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: production
    needs: detect_changes
    #if: ${{ needs.detect_changes.outputs.migrator == 'true' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$MIGRATOR_REPOSITORY:$IMAGE_TAG -f Menubly.Migrator/Dockerfile .
        docker push $ECR_REGISTRY/$MIGRATOR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$MIGRATOR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.MIGRATOR_TASK_DEFINITION }}
        container-name: ${{ env.MIGRATOR_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.MIGRATOR_ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true    

  deploy:
    name: Build & deploy to ECS Fargate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    needs: migration
    if: | 
      always() && 
      (needs.migration.result == 'success' || needs.migration.result == 'skipped')
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Menubly.Host/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
